{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","location","onFocus","console","log","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC0E/BC,EAvEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAarB,MAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,qCAIE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,SAACC,GAAD,MACP,yEAGJ,cAAC,EAAD,UACE,uBACEC,QAvBmB,WACzBC,QAAQC,IAAI,WACZN,GAAc,IAsBRV,UAAWC,IAAQgB,KACnBC,SAvCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBhB,EAAeiB,QAAQC,MACvCC,EAAcjB,EAAae,QAAQC,MAIzCxB,EAAM0B,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KA4B5C,UAKGzB,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK9B,OAEtC,sBAAKL,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK5B,OAEpC,qBAAKP,UAAWC,IAAQoC,QAAxB,SACE,wBAAQC,QApCc,WAC9B5B,GAAc,IAmCoCV,UAAU,MAApD,kC,gBCpCGuC,UAvBE,WACf,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAGhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,aAKd,CAACJ,EAAQC,IAMZ,OACE,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBlB,WALtB,SAACuB,GACvBN,EAAYM","file":"static/js/6.14d4da57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3quRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3j_uH\",\"loading\":\"QuoteForm_loading__n_h4A\",\"control\":\"QuoteForm_control__ZIh5U\",\"actions\":\"QuoteForm_actions__gXlwc\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\"; // Automatically watches if we navigate away. If a certain condition is met, it shows a warning before allowing us to leave.\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const [isEntering, setIsEntering] = useState(false);\n  // show a warning if the user tries to leave after working on the form\n  // determine when user starts working on the form (onFocus)\n  const formFocusedHandler = () => {\n    console.log(\"focused\");\n    setIsEntering(true);\n  };\n\n  // prevents button/form submission from prompting the dialog box\n  const finishedEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  return (\n    <>\n      {/* Prompt requires two props: 'when' takes in true or false defining whether the prompt should be shown if the user changes the url or not. */}\n      {/* 'message' takes a function which should return a string with the text we want to show the user when they try to leave the page. */}\n      {/* 'message' takes a function because we get a location object, which holds information about the page we're trying to go to. */}\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishedEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n            {/* 'programmatic navigation' - trigger a navigation action programmatically, i.e. after data successfully sends to server. See NewQuote.js 'addQuoteHandler' */}\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// allows us to change the browser history (pages we visited)\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  // navigate away once the request is completed\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n    // With history.push we add a new page to the stack.\r\n    // Push allows us to go back to the page we were coming from.\r\n    // With .replace, we redirect without the ability to go back.\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}